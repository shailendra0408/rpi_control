(1) User login or sign-up button - simple with some information 
(2) Only those users would be allowed who are registered in Shailendra Database
(3) Now after login - a dasboard will come
    --> It can be on room basis or place basis - like office or room_1
    --> user can select it from the side menu - just like we have done for the tailoring app. 
    --> According to selection, different button created for different devices will come 
(4) Now once, a switch is pressed - end point related to the button would be called - POST data for that specific form
(5) Now on the server side, when we are calling a end point, it need to return a  value and generally, we redirect the same page. 
(6) but now when we redirect the page, new page load and every button is set to the orignal state. Now there are two ways to solve this
    --> One is that you store the state in the session variables. And when redirect the page, load the previous values from the browser. And every
        time, you push some data i.e. a button is pressed, you redirect the page and load the previous values from the broswer cookies. 
    --> Other way is that you don't at all use form, use JS / Ajax calls in the page to push data to cloud. and when you referesh page, do AJAX calls        to get the present state from the server. 
    --> Other way arond is that you post data, load the page again and while loading the page, call a end point, which will get each and every value         from the server and put in on the page using Jinja2 .
(7) one problem is that if some one manually pressed the button locally on, we need to update the server. For that, you need to do hardware programming. When wver any command to turn on /off any button, update a value in some text file. And after every "x" secdons read the value and see if the state is changed from the previous one. If yes, then update the server. 
(8) How did a local hardware or in our case a RPI will get the state of the appliance 
    --> One way is that it keep on "polling" the state of all the appliances. 
        (a) for this a local cron job has to be made
        (b) Cron job will be too simple and it can be used for some thing like 1-2 or even 10 deices. But what when you are thinking to extend the 
            same code for something like gateway or hub?
        (c) In case of hub, you need to write some thing like agent, which can tackle multiple deives and can do multiple communcation.
    --> one way is that we use some messaging service like GCM to push data from the server to device - Now that data can be defined.
    --> other way is to simply use MQTT protocol with publish and subscribe model. Althoug this is the same thing which happen in the GCM (FCM) also         but GCM is much more complicated thing. At present have written two codes, one for publishing and one for subscribing.
        Now if in the code at present if we are going to use the MQTT, then we can use Cloud.mqtt broker. 
    --> When ever a button is pressed in the web-ui, a function is called internally to do the corresponding change in the DB. At same point, publish        a message with a specific topic. 
    --> On the RPI side, we will run a script (with superviord) to subscribe to multiple topics 
        example - subscribe([("my/topic", 0), ("another/topic", 2)])
    --> Now if there is any change, we find it and then we take a corresponding action on te RPI using the same GPIO module
 
    
(9) How to import a python as a module 
    --> create a file __init__.py in every directory which you want to include and if there are any files in it, use them as 
        __all__ = ["dto", "util", "service", "console","application", "tables"] where all in "" are the files locally in the directory 

(10) On the hardware side, how to detect if there is change in the state due to local pressing of the switch?
    --> Run a cron job every second and see if the state of the button is same as the command revceived from the server or it is different. 
    --> if it is different, then ??????????? And meanwhile how to determine if there is even a change due to physical pressing of the switch:   
